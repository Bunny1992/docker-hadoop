version: "3"

services:

  namenode:
    image: bde2020/hadoop-namenode
    container_name: namenode
    restart: unless-stopped
    ports:
      - "9870:9870"
      - "8020:8020"
      - "50070:50070"
    volumes:
      - namenode:/hadoop/dfs/name
      - ./zeppelin/examples:/opt/sansa-examples
    environment:
      - CLUSTER_NAME=test
    env_file:
      - ./hadoop.env
    networks:
       - DL-net

  datanode:
    image: bde2020/hadoop-datanode
    container_name: datanode
    ports:
      - "9864:9864"
      - "50075:50075"
    restart: unless-stopped
    volumes:
      - datanode:/hadoop/dfs/data
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
    env_file:
      - ./hadoop.env
    networks:
       - DL-net
       
  resourcemanager:
    image: bde2020/hadoop-resourcemanager
    container_name: resourcemanager
    restart: unless-stopped
    ports:
      - "8088:8088"
    environment:
      SERVICE_PRECONDITION: "namenode:8020 namenode:9870 datanode:9864"
    env_file:
      - ./hadoop.env
    networks:
       - DL-net
       
  nodemanager1:
    image: bde2020/hadoop-nodemanager
    container_name: nodemanager
    restart: unless-stopped
    ports:
      - "8042:8042"
    environment:
      SERVICE_PRECONDITION: "namenode:8020 namenode:9870 datanode:9864 resourcemanager:8088"
    env_file:
      - ./hadoop.env
    networks:
       - DL-net
       
  historyserver:
    image: bde2020/hadoop-historyserver
    container_name: historyserver
    restart: unless-stopped
    ports:
      - "8188:8188"
    environment:
      SERVICE_PRECONDITION: "namenode:8020 namenode:9870 datanode:9864 resourcemanager:8088"
    volumes:
      - historyserver:/hadoop/yarn/timeline
    env_file:
      - ./hadoop.env
    networks:
       - DL-net
       
  spark-master:
    image: bde2020/spark-master
    container_name: spark-master
    ports:
      - "8080:8080"
      - "7077:7077"
    environment:
      - INIT_DAEMON_STEP=setup_spark
      - CORE_CONF_fs_defaultFS=hdfs://namenode:8020
      - SPARK_PUBLIC_DNS=localhost
    depends_on:
      - namenode
      - datanode
    links:
      - namenode
      - datanode
    networks:
      - DL-net
        
  spark-worker-1:
    image: bde2020/spark-worker
    container_name: spark-worker-1
    depends_on:
      - spark-master
    ports:
      - "8081:8081"
    environment:
      - "SPARK_MASTER=spark://spark-master:7077"
      - CORE_CONF_fs_defaultFS=hdfs://namenode:8020
      - SPARK_PUBLIC_DNS=localhost
    links:
      - spark-master
    networks:
       - DL-net
      
  hue:
    image: gethue/hue
    container_name: hue
    ports:
      - "8888:8888"
    environment:
      - NAMENODE_HOST=namenode
      - SPARK_MASTER=spark://spark-master:7077
    volumes: 
      - ./hue/hue-overrides.ini:/usr/share/hue/desktop/conf/z-hue.ini
    links:
      - spark-master
    networks:
       - DL-net
       
  hive-server:
    image: bde2020/hive
    container_name: hive-server
    env_file:
      - ./hadoop.env
    environment:
      - "HIVE_CORE_CONF_javax_jdo_option_ConnectionURL=jdbc:postgresql://hive-metastore/metastore"
    links:
      - namenode
      - hive-metastore
    ports:
      - 10000:10000
    networks:
       - DL-net

  hive-metastore-postgresql:
    image: bde2020/hive-metastore-postgresql
    container_name: hive-metastore-postgresql

  hive-metastore:
    image: bde2020/hive
    container_name: hive-metastore
    env_file:
      - ./hadoop.env
    links:
      - namenode
      - hive-metastore-postgresql
    command: /opt/hive/bin/hive --service metastore
    ports:
      - 9083:9083
    networks:
       - DL-net
       
  database:
    image: mysql
    container_name: database
    ports:
      - "3306:3306"
    command: --init-file /data/application/init.sql
    volumes:
      - /tmp/mysql/data:/var/lib/mysql
      - ./init.sql:/data/application/init.sql
    environment:
      MYSQL_ROOT_PASSWORD: secret
      MYSQL_DATABASE: hue
    restart: unless-stopped
    networks:
       - DL-net
           
  nifi: 
    environment: 
      - NIFI_WEB_HTTP_PORT=8080
      - NIFI_CLUSTER_IS_NODE=true
      - NIFI_CLUSTER_NODE_PROTOCOL_PORT=8082
      - "NIFI_ZK_CONNECT_STRING=zookeeper:2181"
      - "NIFI_ELECTION_MAX_WAIT=1 min"
    image: "apache/nifi:latest"
    depends_on:
      - zookeeper
      - kafka
    links:
      - kafka
      - zookeeper
    ports: 
      - "49153:8080"
    volumes:
      - /tmp/hadoop-conf:/hadoop-conf
      - ./nifi/conf:/opt/nifi/conf
      - ./nifi/logs:/opt/nifi/logs
      - ./data:/opt/datafiles
      - nifi:/opt/nifi/flowfile_repository
      - nifi:/opt/nifi/database_repository
      - nifi:/opt/nifi/content_repository
      - nifi:/opt/nifi/provenance_repository
    networks:
       - DL-net
       
  kafka:
    build: .
    links:
     - zookeeper
    expose:
      - "8084"
      - "9092"
    ports:
      - "8084:8084"
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_OPTS: -javaagent:/usr/app/jmx_prometheus_javaagent.jar=8084:/usr/app/prom-jmx-agent-config.yml
    volumes:
      - ./prometheus:/prometheus
      - kafka:/var/lib/kafka
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
       - DL-net

  kafka_manager:
    image: hlebalbau/kafka-manager
    container_name: kafka_manager
    expose:
      - "9000"
    ports: 
      - "9001:9000"
    environment:
      ZK_HOSTS: "172.16.21.13:2181"
      APPLICATION_SECRET: "random-secret"
    command: -Dpidfile.path=/dev/null
    depends_on:
      - "zookeeper"
      - "kafka"
    networks:
       - DL-net
    
  prometheus:
    image: prom/prometheus
    ports:
      - 9090:9090/tcp
    volumes:
      - ./prometheus:/etc/prometheus
    links:
      - kafka
    networks:
       - DL-net
  
  grafana:
    image: grafana/grafana:6.1.1
    container_name: grafana
    expose:
      - "3000"
    ports: 
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=password
    volumes:
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    depends_on:
      - "prometheus"
    networks:
       - DL-net
      
  zeppelin:
    image: apache/zeppelin:0.8.1
    hostname: zeppelin
    container_name: zeppelin
    expose:
      - "8080"
      - "8443"
      - "4040"
    ports:
      - "4040:8080"
    volumes:
      - ./zeppelin/datadrive:/datadrive
      - ./zeppelin/pyspark-notebooks:/zeppelin/notebook
      - ./zeppelin/zeppelin-interpreters/interpreter.json:/zeppelin/conf/interpreter.json
    networks:
      - DL-net
      
  jupyter-lab:
    image: jupyterhub/singleuser
    depends_on:
      - spark-master
      - namenode
    volumes:
      - jupyter_data:/home/jovyan/work:rw
    ports:
      - 8000:8888
    env_file:
      - ./docker-jupyter-spark/docker-compose.env
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - PYSPARK_PYTHON=/usr/bin/python3
      - PYSPARK_DRIVER_PYTHON=/opt/conda/bin/python

  ranger-admin:
    image: kadensungbincho/ranger-admin:2.1.0
    container_name: ranger-admin
    hostname: ranger
    depends_on:
      - database
    volumes:
      - ./admin/bootstrap.sh:/opt/ranger_admin/bootstrap.sh
      - ./admin/install.properties:/opt/ranger_admin/install.properties
    command: ["./bootstrap.sh"]
    expose:
      - "6080"
    ports:
      - "6080:6080"
    restart: always

  ranger-usersync:
    image: kadensungbincho/ranger-usersync:2.1.0
    container_name: ranger-usersync
    hostname: usersync
    depends_on:
      - ranger-admin
    volumes:
      - ./usersync/bootstrap.sh:/opt/ranger_usersync/bootstrap.sh
      - ./usersync/install.properties:/opt/ranger_usersync/install.properties
    command: ["./bootstrap.sh"]
    restart: always

  ranger-usersync-ldap:
    image: kadensungbincho/ranger-usersync:2.1.0
    container_name: ranger2.0.0-usersync-ldap
    hostname: usersync-ldap
    depends_on:
      - ranger-admin
    volumes:
      - ./usersync/bootstrap-ldap.sh:/opt/ranger_usersync/bootstrap.sh
      - ./usersync/install-ldap.properties:/opt/ranger_usersync/install-hdfs.properties
      - ./usersync/templates:/templates
      - ./usersync/conf.dist/log4j.properties:/opt/ranger_usersync/conf.dist/log4j.properties

  zookeeper: 
    container_name: zookeeper
    environment: 
      - ALLOW_ANONYMOUS_LOGIN=yes
    hostname: zookeeper
    image: "bitnami/zookeeper:latest"
    ports:
      - "2181:2181"
    volumes:
      - zookeeper:/var/lib/zookeeper
    networks:
       - DL-net
      
volumes:
  namenode:
  datanode:
  historyserver:
  zookeeper:
  kafka:
  nifi:
  zeppelin:
  jupyter_data:
  db_data:

networks:
  DL-net:
    name: DL-net
  default:
    external:
      name: ranger-env
