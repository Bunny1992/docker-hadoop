{
  "paragraphs": [
    {
      "text": "import scala.collection.mutable\nimport org.apache.spark.sql.SparkSession\nimport org.apache.log4j.{ Level, Logger }\nimport net.sansa_stack.ml.spark.clustering.RDFByModularityClustering\n\nval graphFile \u003d \"hdfs://namenode:8020/data/Clustering_sampledata.nt\"\nval outputFile \u003d \"hdfs://namenode:8020/data/clustering.out\"\nval numIterations \u003d 10\n\nRDFByModularityClustering(sc, numIterations, graphFile, outputFile)",
      "user": "anonymous",
      "dateUpdated": "2021-05-05 12:12:54.149",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u003cconsole\u003e:32: error: object sansa_stack is not a member of package net\n       import net.sansa_stack.ml.spark.clustering.RDFByModularityClustering\n                  ^\n\u003cconsole\u003e:40: error: not found: value RDFByModularityClustering\n       RDFByModularityClustering(sc, numIterations, graphFile, outputFile)\n       ^\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1494503254565_1530513202",
      "id": "20170511-114734_1804790867",
      "dateCreated": "2017-05-11 11:47:34.000",
      "dateStarted": "2021-05-05 12:12:54.205",
      "dateFinished": "2021-05-05 12:12:54.328",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "import scala.collection.mutable\nimport net.sansa_stack.rdf.spark.model.JenaSparkRDDOps\nimport net.sansa_stack.ml.spark.mining.amieSpark.KBObject.KB\nimport net.sansa_stack.ml.spark.mining.amieSpark.{ RDFGraphLoader, DfLoader }\nimport net.sansa_stack.ml.spark.mining.amieSpark.MineRules.Algorithm\n\nval input \u003d \"hdfs://namenode:8020/data/MineRules_sampledata.tsv\"\nval outputPath \u003d \"hdfs://namenode:8020/output\"\nval hdfsPath \u003d outputPath + \"/\"\n\nval ops \u003d JenaSparkRDDOps(sc)\nimport ops._\n\nval know \u003d new KB()\nknow.sethdfsPath(hdfsPath)\nknow.setKbSrc(input)\n\nknow.setKbGraph(RDFGraphLoader.loadFromFile(know.getKbSrc(), sc, 2))\nknow.setDFTable(DfLoader.loadFromFileDF(know.getKbSrc, sc, sqlContext, 2))\n\nval algo \u003d new Algorithm(know, 0.01, 3, 0.1, hdfsPath)\n\n//var erg \u003d algo.ruleMining(sc, sqlContext)\n//println(erg)\nvar output \u003d algo.ruleMining(sc, sqlContext)\n\nvar outString \u003d output.map { x \u003d\u003e\n  var rdfTrp \u003d x.getRule()\n  var temp \u003d \"\"\n  for (i \u003c- 0 to rdfTrp.length - 1) {\n    if (i \u003d\u003d 0) {\n      temp \u003d rdfTrp(i) + \" \u003c\u003d \"\n    } else {\n      temp +\u003d rdfTrp(i) + \" \\u2227 \"\n    }\n  }\n  temp \u003d temp.stripSuffix(\" \\u2227 \")\n  temp\n}.toSeq\nvar rddOut \u003d sparkSession.sparkContext.parallelize(outString)\nrddOut.saveAsTextFile(outputPath + \"/testOut\")",
      "user": "anonymous",
      "dateUpdated": "2017-10-27 01:48:09.000",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/text"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1494503351941_-977125242",
      "id": "20170511-114911_1382631593",
      "dateCreated": "2017-05-11 11:49:11.000",
      "dateStarted": "2017-10-27 01:48:09.000",
      "dateFinished": "2017-10-27 01:46:59.000",
      "status": "ABORT",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "user": "anonymous",
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1494503670410_82299729",
      "id": "20170511-115430_1909909659",
      "dateCreated": "2017-05-11 11:54:30.000",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Machine Learning",
  "id": "2CGRVF4X7",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {
    "consumer:shared_process": []
  },
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}